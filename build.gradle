import java.text.SimpleDateFormat


plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'antlr'
    id 'signing'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "biz.aQute.bnd.builder" version "6.4.0"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
    id "groovy"
    id "me.champeau.jmh" version "0.7.1"
}

final String javaVersion = project.hasProperty("javaVersion") ?
        (project.property("javaVersion") as String).replaceAll("^([0-9]+).*", "\$1")
        : null
if (javaVersion == null) {
    throw new Throwable("Please define a javaVersion in your gradle.properties")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

def makeDevelopmentVersion(parts) {
    def version = String.join("-", parts)
    println "created development version: $version"
    return version
}

def getDevelopmentVersion() {
    def dateTime = new SimpleDateFormat('yyyy-MM-dd\'T\'HH-mm-ss').format(new Date())
    def gitCheckOutput = new StringBuilder()
    def gitCheckError = new StringBuilder()
    def gitCheck = ["git", "-C", projectDir.toString(), "rev-parse", "--is-inside-work-tree"].execute()
    gitCheck.waitForProcessOutput(gitCheckOutput, gitCheckError)
    def isGit = gitCheckOutput.toString().trim()
    if (isGit != "true") {
        return makeDevelopmentVersion(["0.0.0", dateTime, "no-git"])
    }

    def isCi = Boolean.parseBoolean(System.env.CI)
    if (isCi) {
        def gitHashOutput = new StringBuilder()
        def gitHashError = new StringBuilder()
        def gitShortHash = ["git", "-C", projectDir.toString(), "rev-parse", "--short", "HEAD"].execute()
        gitShortHash.waitForProcessOutput(gitHashOutput, gitHashError)
        def gitHash = gitHashOutput.toString().trim()
        if (gitHash.isEmpty()) {
            println "git hash is empty: error: ${gitHashError.toString()}"
            throw new IllegalStateException("git hash could not be determined")
        }

        return makeDevelopmentVersion(["0.0.0", dateTime, gitHash])
    }

    def gitRevParseOutput = new StringBuilder()
    def gitRevParseError = new StringBuilder()
    def gitRevParse = ["git", "-C", projectDir.toString(), "rev-parse", "--abbrev-ref", "HEAD"].execute()
    gitRevParse.waitForProcessOutput(gitRevParseOutput, gitRevParseError)
    def branchName = gitRevParseOutput.toString().trim()

    return makeDevelopmentVersion(["0.0.0", branchName, "SNAPSHOT"])
}

def reactiveStreamsVersion = '1.0.3'
def slf4jVersion = '2.0.7'
def releaseVersion = System.env.RELEASE_VERSION
def antlrVersion = '4.11.1' // https://mvnrepository.com/artifact/org.antlr/antlr4-runtime
def guavaVersion = '32.1.2-jre'
version = releaseVersion ? releaseVersion : getDevelopmentVersion()
group = 'com.graphql-java'

gradle.buildFinished { buildResult ->
    println "*******************************"
    println "*"
    if (buildResult.failure != null) {
        println "* FAILURE - ${buildResult.failure}"
    } else {
        println "* SUCCESS"
    }
    println "* Version: $version"
    println "*"
    println "*******************************"
}

repositories {
    mavenCentral()
    mavenLocal()
}

jar {
    from "LICENSE.md"
    from "src/main/antlr/Graphql.g4"
    from "src/main/antlr/GraphqlOperation.g4"
    from "src/main/antlr/GraphqlSDL.g4"
    from "src/main/antlr/GraphqlCommon.g4"
    manifest {
        attributes('Automatic-Module-Name': 'com.graphqljava')
    }
}

dependencies {
    compileOnly 'org.jetbrains:annotations:24.0.1'
    implementation 'org.antlr:antlr4-runtime:' + antlrVersion
    implementation 'org.slf4j:slf4j-api:' + slf4jVersion
    api 'com.graphql-java:java-dataloader:3.2.1'
    api 'org.reactivestreams:reactive-streams:' + reactiveStreamsVersion
    antlr 'org.antlr:antlr4:' + antlrVersion
    implementation 'com.google.guava:guava:' + guavaVersion
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    testImplementation 'org.codehaus.groovy:groovy:3.0.19'
    testImplementation 'org.codehaus.groovy:groovy-json:3.0.19'
    testImplementation 'com.google.code.gson:gson:2.10.1'
    testImplementation 'org.eclipse.jetty:jetty-server:11.0.15'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'
    testImplementation 'org.slf4j:slf4j-simple:' + slf4jVersion
    testImplementation 'org.awaitility:awaitility-groovy:4.2.0'
    testImplementation 'com.github.javafaker:javafaker:1.0.2'

    testImplementation 'org.reactivestreams:reactive-streams-tck:' + reactiveStreamsVersion
    testImplementation "io.reactivex.rxjava2:rxjava:2.2.21"

    testImplementation 'org.testng:testng:7.8.0' // use for reactive streams test inheritance

    testImplementation 'org.openjdk.jmh:jmh-core:1.37'
    testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    jmh 'org.openjdk.jmh:jmh-core:1.37'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
}

shadowJar {
    minimize()
    archiveClassifier.set('')
    configurations = [project.configurations.compileClasspath]
    relocate('com.google.common', 'graphql.com.google.common') {
        include 'com.google.common.collect.*'
        include 'com.google.common.base.*'
        include 'com.google.common.math.*'
        include 'com.google.common.primitives.*'
    }
    relocate('org.antlr.v4.runtime', 'graphql.org.antlr.v4.runtime')
    dependencies {
        include(dependency('com.google.guava:guava:' + guavaVersion))
        include(dependency('org.antlr:antlr4-runtime:' + antlrVersion))
    }
    from "LICENSE.md"
    from "src/main/antlr/Graphql.g4"
    from "src/main/antlr/GraphqlOperation.g4"
    from "src/main/antlr/GraphqlSDL.g4"
    from "src/main/antlr/GraphqlCommon.g4"
    manifest {
        attributes('Automatic-Module-Name': 'com.graphqljava')
    }
    //Apply biz.aQute.bnd.builder plugin logic to shadowJar as in BndBuilderPlugin 
    convention.plugins.bundle = new aQute.bnd.gradle.BundleTaskConvention(it)
    doLast {
        //Call bnd after the ShadowJar was built to update the MANIFEST.MF
        buildBundle()
    }

    //Configure bnd for shadowJar
    // -exportcontents: graphql.*  Adds all packages of graphql and below to the exported packages list
    // -removeheaders:  Private-Package Removes the MANIFEST.MF header Private-Package, which contains all the internal packages and 
    //                                  also the repackaged packages like guava, which would be wrong after repackaging.
    // Import-Package:  Changes the imported packages header, to exclude guava and dependencies from the import list (! excludes packages)
    //                  Guava was repackaged and included inside the jar, so we need to remove it.
    //                  ANTLR was shaded, so we need to remove it.
    //                  sun.misc is a JRE internal-only class that is not directly used by graphql-java. It was causing problems in libraries using graphql-java.
    //                  The last ,* copies all the existing imports from the other dependencies, which is required.
    bnd('''
-exportcontents: graphql.*
-removeheaders: Private-Package
Import-Package: !android.os.*,!com.google.*,!org.checkerframework.*,!javax.annotation.*,!graphql.com.google.*,!org.antlr.*,!graphql.org.antlr.*,!sun.misc.*,*
''')
}


task extractWithoutGuava(type: Copy) {
    from({ zipTree({ "build/libs/graphql-java-${project.version}.jar" }) }) {
        exclude('/com/**')
    }
    into layout.buildDirectory.dir("extract")
}

extractWithoutGuava.dependsOn jar

task buildNewJar(type: Jar) {
    from layout.buildDirectory.dir("extract")
    archiveFileName = "graphql-java-tmp.jar"
    destinationDirectory = file("${project.buildDir}/libs")
    manifest {
        from file("build/extract/META-INF/MANIFEST.MF")
    }
    doLast {
        delete("build/libs/graphql-java-${project.version}.jar")
        file("build/libs/graphql-java-tmp.jar").renameTo(file("build/libs/graphql-java-${project.version}.jar"))
    }
}

buildNewJar.dependsOn extractWithoutGuava

shadowJar.finalizedBy extractWithoutGuava, buildNewJar


task testng(type: Test) {
    useTestNG()
}
check.dependsOn testng

compileJava {
    options.compilerArgs += ["-parameters"]
    source file("build/generated-src"), sourceSets.main.java
}

generateGrammarSource {
    includes = ['Graphql.g4']
    maxHeapSize = "64m"
    arguments += ["-visitor"]
    outputDirectory = file("${project.buildDir}/generated-src/antlr/main/graphql/parser/antlr")
}
generateGrammarSource.inputs
    .dir('src/main/antlr')
    .withPropertyName('sourceDir')
    .withPathSensitivity(PathSensitivity.RELATIVE)


task sourcesJar(type: Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options.encoding = 'UTF-8'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

List<TestDescriptor> failedTests = []

test {
    testLogging {
        events "FAILED", "SKIPPED"
        exceptionFormat = "FULL"
    }

    afterTest { TestDescriptor descriptor, TestResult result ->
        if (result.getFailedTestCount() > 0) {
            failedTests.add(descriptor)
        }
    }
}

/*
 * The gradle.buildFinished callback is deprecated BUT there does not seem to be a decent alternative in gradle 7
 * So progress over perfection here
 *
 * See https://github.com/gradle/gradle/issues/20151
 */
gradle.buildFinished {
    if (!failedTests.isEmpty()) {
        println "\n\n"
        println "============================"
        println "These are the test failures"
        println "============================"
        for (td in failedTests) {
            println "${td.getClassName()}.${td.getDisplayName()}"
        }
        println "============================"
    }
}


allprojects {
    tasks.withType(Javadoc) {
        exclude('**/antlr/**')
    }
}

publishing {

    publications {

        graphqlJava(MavenPublication) {
            version version
            from components.java

            artifact sourcesJar {
                archiveClassifier = "sources"
            }
            artifact javadocJar {
                archiveClassifier = "javadoc"
            }
            pom.withXml {
                // Removing antlr4 below (introduced in `1ac98bf`) addresses an issue with
                // the Gradle ANTLR plugin. `1ac98bf` can be reverted and this comment removed once
                // that issue is fixed and Gradle upgraded. See https://goo.gl/L92KiF and https://goo.gl/FY0PVR.
                //
                // Removing antlr4-runtime and guava because the classes we want to use are "shaded" into the jar itself
                // via the shadowJar task
                def pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    it.artifactId.text() == 'antlr4' || it.artifactId.text() == 'antlr4-runtime' || it.artifactId.text() == 'guava'
                }.each() {
                    it.parent().remove(it)
                }
                pomNode.children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'graphql-java'
                    description 'GraphqL Java'
                    url "https://github.com/graphql-java/graphql-java"
                    scm {
                        url "https://github.com/graphql-java/graphql-java"
                        connection "https://github.com/graphql-java/graphql-java"
                        developerConnection "https://github.com/graphql-java/graphql-java"
                    }
                    licenses {
                        license {
                            name 'MIT'
                            url 'https://github.com/graphql-java/graphql-java/blob/master/LICENSE.md'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'andimarek'
                            name 'Andreas Marek'
                        }
                    }
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.env.MAVEN_CENTRAL_USER
            password = System.env.MAVEN_CENTRAL_PASSWORD
        }
    }
}

// to publish to local maven repo skip signing: ./gradlew publishToMavenLocal  -x signGraphqlJavaPublication
signing {
    def signingKey = System.env.MAVEN_CENTRAL_PGP_KEY
    useInMemoryPgpKeys(signingKey, "")
    sign publishing.publications
}


// all publish tasks depend on the build task
tasks.withType(PublishToMavenRepository) {
    dependsOn build
}

// Only publish Maven POM, disable default Gradle modules file
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

test {
    useJUnitPlatform()
}
