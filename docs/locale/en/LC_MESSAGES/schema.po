# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Brad Baker
# This file is distributed under the same license as the graphql-java
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: graphql-java current\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-15 10:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../schema.rst:2
msgid "Creating a schema"
msgstr ""

#: ../../schema.rst:5
msgid ""
"A schema defines your GraphQL API by defining each field that can be "
"queried or mutated."
msgstr ""

#: ../../schema.rst:8
msgid ""
"``graphql-java`` offers two different ways of defining the schema: "
"Programmatically as Java code or via a special graphql dsl (called SDL)."
msgstr ""

#: ../../schema.rst:11
msgid ""
"NOTE: SDL is not currently part of the `formal graphql spec "
"<https://facebook.github.io/graphql/#sec-Appendix-Grammar-Summary.Query-"
"Document>`_. The implementation in this library is based off the "
"`reference implementation <https://github.com/graphql/graphql-js>`_.  "
"However plenty of code out there is based on this SDL syntax and hence "
"you can be fairly confident that you are building on solid technology "
"ground."
msgstr ""

#: ../../schema.rst:16
msgid "If you are unsure which option to use we recommend the SDL."
msgstr ""

#: ../../schema.rst:18
msgid "SDL example:"
msgstr ""

#: ../../schema.rst:27
msgid "Java code example:"
msgstr ""

#: ../../schema.rst:39
msgid "DataFetcher and TypeResolver"
msgstr ""

#: ../../schema.rst:41
msgid ""
"A ``DataFetcher`` provides the data for a field (and changes something, "
"if it is a mutation)."
msgstr ""

#: ../../schema.rst:43
msgid ""
"Every field definition has a ``DataFetcher``. When one is not configured,"
" a `PropertyDataFetcher <https://github.com/graphql-java/graphql-"
"java/blob/master/src/main/java/graphql/schema/PropertyDataFetcher.java>`_"
" is used."
msgstr ""

#: ../../schema.rst:46
msgid ""
"``PropertyDataFetcher`` fetches data from ``Map`` and Java Beans. So when"
" the field name matches the Map key or the property name of the source "
"Object, no ``DataFetcher`` is needed."
msgstr ""

#: ../../schema.rst:49
msgid ""
"A ``TypeResolver`` helps ``graphql-java`` to decide which type a concrete"
" value belongs to. This is needed for ``Interface`` and ``Union``."
msgstr ""

#: ../../schema.rst:52
msgid ""
"For example imagine you have an ``Interface`` called *MagicUserType* "
"which resolves back to a series of Java classes called *Wizard*, *Witch* "
"and *Necromancer*.  The type resolver is responsible for examining a "
"runtime object and deciding what ``GraphqlObjectType`` should be used to "
"represent it, and hence what data fetchers and fields will be invoked."
msgstr ""

#: ../../schema.rst:75
msgid "Creating a schema using the SDL"
msgstr ""

#: ../../schema.rst:77
msgid ""
"When defining a schema via SDL, you provide the needed ``DataFetcher`` s "
"and ``TypeResolver`` s when the executable schema is created."
msgstr ""

#: ../../schema.rst:80
msgid ""
"Take for example the following static schema definition file called "
"``starWarsSchema.graphqls``:"
msgstr ""

#: ../../schema.rst:125
msgid ""
"The static schema definition file ``starWarsSchema.graphqls`` contains "
"the field and type definitions, but you need a runtime wiring to make it "
"a truly executable schema."
msgstr ""

#: ../../schema.rst:128
msgid ""
"The runtime wiring contains ``DataFetcher`` s, ``TypeResolvers`` s and "
"custom ``Scalar`` s that are needed to make a fully executable schema."
msgstr ""

#: ../../schema.rst:131
msgid "You wire this together using this builder pattern:"
msgstr ""

#: ../../schema.rst:161
msgid ""
"Finally, you can generate an executable schema by combining the static "
"schema and the wiring together as shown in this example:"
msgstr ""

#: ../../schema.rst:176
msgid ""
"In addition to the builder style shown above, ``TypeResolver`` s and "
"``DataFetcher`` s can also be wired in using the ``WiringFactory`` "
"interface.  This allows for a more dynamic runtime wiring since the SDL "
"definitions can be examined in order to decide what to wire in.  You "
"could for example look at SDL directives, or some other aspect of the SDL"
" definition to help you decide what runtime to create."
msgstr ""

#: ../../schema.rst:223
msgid "Creating a schema programmatically"
msgstr ""

#: ../../schema.rst:225
msgid ""
"When the schema is created programmatically ``DataFetcher`` s and "
"``TypeResolver`` s are provided at type creation:"
msgstr ""

#: ../../schema.rst:227
msgid "Example:"
msgstr ""

#: ../../schema.rst:249
msgid "Types"
msgstr ""

#: ../../schema.rst:251
msgid "The GraphQL type system supports the following kind of types:"
msgstr ""

#: ../../schema.rst:253 ../../schema.rst:263
msgid "Scalar"
msgstr ""

#: ../../schema.rst:254 ../../schema.rst:283
msgid "Object"
msgstr ""

#: ../../schema.rst:255 ../../schema.rst:313
msgid "Interface"
msgstr ""

#: ../../schema.rst:256 ../../schema.rst:339
msgid "Union"
msgstr ""

#: ../../schema.rst:257
msgid "InputObject"
msgstr ""

#: ../../schema.rst:258 ../../schema.rst:382
msgid "Enum"
msgstr ""

#: ../../schema.rst:265
msgid "``graphql-java`` supports the following Scalars:"
msgstr ""

#: ../../schema.rst:268
msgid "``GraphQLString``"
msgstr ""

#: ../../schema.rst:269
msgid "``GraphQLBoolean``"
msgstr ""

#: ../../schema.rst:270
msgid "``GraphQLInt``"
msgstr ""

#: ../../schema.rst:271 ../../schema.rst:276
msgid "``GraphQLFloat``"
msgstr ""

#: ../../schema.rst:272
msgid "``GraphQLID``"
msgstr ""

#: ../../schema.rst:273
msgid "``GraphQLLong``"
msgstr ""

#: ../../schema.rst:274
msgid "``GraphQLShort``"
msgstr ""

#: ../../schema.rst:275
msgid "``GraphQLByte``"
msgstr ""

#: ../../schema.rst:277
msgid "``GraphQLBigDecimal``"
msgstr ""

#: ../../schema.rst:278
msgid "``GraphQLBigInteger``"
msgstr ""

#: ../../schema.rst:285 ../../schema.rst:317 ../../schema.rst:341
#: ../../schema.rst:384 ../../schema.rst:411
msgid "SDL Example:"
msgstr ""

#: ../../schema.rst:295 ../../schema.rst:325 ../../schema.rst:358
#: ../../schema.rst:395 ../../schema.rst:420
msgid "Java Example:"
msgstr ""

#: ../../schema.rst:315
msgid "Interfaces are abstract definitions of types."
msgstr ""

#: ../../schema.rst:409
msgid "ObjectInputType"
msgstr ""

#: ../../schema.rst:433
msgid "Type References (recursive types)"
msgstr ""

#: ../../schema.rst:435
msgid ""
"GraphQL supports recursive types: For example a ``Person`` can contain a "
"list of friends of the same type."
msgstr ""

#: ../../schema.rst:437
msgid ""
"To be able to declare such a type, ``graphql-java`` has a "
"``GraphQLTypeReference`` class."
msgstr ""

#: ../../schema.rst:439
msgid ""
"When the schema is created, the ``GraphQLTypeReference`` is replaced with"
" the actual real type Object."
msgstr ""

#: ../../schema.rst:441
msgid "For example:"
msgstr ""

#: ../../schema.rst:452
msgid ""
"When the schema is declared via SDL, no special handling of recursive "
"types is needed."
msgstr ""

#: ../../schema.rst:455
msgid "Modularising the Schema SDL"
msgstr ""

#: ../../schema.rst:457
msgid ""
"Having one large schema file is not always viable.  You can modularise "
"you schema using two techniques."
msgstr ""

#: ../../schema.rst:459
msgid ""
"The first technique is to merge multiple Schema SDL files into one logic "
"unit.  In the case below the schema has been split into multiple files "
"and merged all together just before schema generation."
msgstr ""

#: ../../schema.rst:480
msgid ""
"The Graphql SDL type system has another construct for modularising a "
"schema.  You can use `type extensions` to add extra fields and interfaces"
" to a type."
msgstr ""

#: ../../schema.rst:483
msgid "Imagine you start with a type like this in one schema file."
msgstr ""

#: ../../schema.rst:492
msgid "Another part of your system can extend this type to add more shape to it."
msgstr ""

#: ../../schema.rst:503
msgid ""
"You can have as many extensions as you think sensible.  They will be "
"combined in the order in which they are encountered.  Duplicate fields "
"will be merged as one (however field re-definitions into new types are "
"not allowed)."
msgstr ""

#: ../../schema.rst:514
msgid ""
"With all these type extensions in place the `Human` type now looks like "
"this at runtime."
msgstr ""

#: ../../schema.rst:526
msgid ""
"This is especially useful at the top level.  You can use extension types "
"to add new fields to the top level schema \"query\".  Teams could "
"contribute \"sections\" on what is being offered as the total graphql "
"query."
msgstr ""

#: ../../schema.rst:559
msgid "Subscription Support"
msgstr ""

#: ../../schema.rst:561
msgid ""
"Subscriptions are not officially specified yet: ``graphql-java`` supports"
" currently a very basic implementation where you can define a "
"subscription in the schema with "
"``GraphQLSchema.Builder.subscription(...)``. This enables you to handle a"
" subscription request:"
msgstr ""

