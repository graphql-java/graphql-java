# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Brad Baker
# This file is distributed under the same license as the graphql-java
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr "Project-Id-Version: graphql-java current\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-14 18:16+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../schema.rst:2
msgid "Creating a schema"
msgstr "创建Schema"

#: ../../schema.rst:5
msgid ""
"A schema defines your GraphQL API by defining each field that can be "
"queried or mutated."
msgstr "Schema的主要用途是定义所有可供查询的字段（field），它们最终组合成一套完整的GraphQL API."

#: ../../schema.rst:8
msgid ""
"``graphql-java`` offers two different ways of defining the schema: "
"Programmatically as Java code or via a special graphql dsl (called SDL)."
msgstr "“graphql-java”提供两种方法来定义Schema。用java代码来定义、用GraphQL SDL(即IDL)来定义。"

#: ../../schema.rst:11
msgid ""
"NOTE: SDL is not currently part of the `formal graphql spec "
"<https://facebook.github.io/graphql/#sec-Appendix-Grammar-Summary.Query-"
"Document>`_. The implementation in this library is based off the "
"`reference implementation <https://github.com/graphql/graphql-js>`_.  "
"However plenty of code out there is based on this SDL syntax and hence "
"you can be fairly confident that you are building on solid technology "
"ground."
msgstr "注意：SDL（IDL）现在还不是 `官方 graphql 规范 <https://facebook.github.io/graphql/#sec-Appendix-Grammar-Summary.Query-Document>`_. 本GraphQL实现，是基于 `已有的JS参考实现 <https://github.com/graphql/graphql-js>`_ 来开发的。但JS参考实现中的很多代码也是基于SDL（IDL）语法的，所以你可以认为这语法是可以长期使用的."

#: ../../schema.rst:16
msgid "If you are unsure which option to use we recommend the SDL."
msgstr "如果你不确认用“java代码”还是用“GraphQL SDL(即IDL)”来定义你的Schema，那么我们建议你用SDL（IDL）"

#: ../../schema.rst:18
msgid "SDL example:"
msgstr ""

#: ../../schema.rst:27
msgid "Java code example:"
msgstr "java代码例子："

#: ../../schema.rst:39
msgid "DataFetcher and TypeResolver"
msgstr "DataFetcher 与 TypeResolver"

#: ../../schema.rst:41
msgid ""
"A ``DataFetcher`` provides the data for a field (and changes something, "
"if it is a mutation)."
msgstr "对象 ``DataFetcher`` 作用是获取字段（field）对应的数据；另外，在修改(mutation)操作时，可以更新数据"

#: ../../schema.rst:43
msgid ""
"Every field definition has a ``DataFetcher``. When one is not configured,"
" a `PropertyDataFetcher <https://github.com/graphql-java/graphql-"
"java/blob/master/src/main/java/graphql/schema/PropertyDataFetcher.java>`_"
" is used."
msgstr "每个字段都有自己的 ``DataFetcher``. 如果未为字段指定DataFetcher, 那么自动使用默认的 `PropertyDataFetcher <https://github.com/graphql-java/graphql-java/blob/master/src/main/java/graphql/schema/PropertyDataFetcher.java>`_ ."

#: ../../schema.rst:46
msgid ""
"``PropertyDataFetcher`` fetches data from ``Map`` and Java Beans. So when"
" the field name matches the Map key or the property name of the source "
"Object, no ``DataFetcher`` is needed."
msgstr "``PropertyDataFetcher`` 从 ``Map`` 和 Java Beans 中获取数据. 所以，当Schema中的field名，与Map中的key值，或 ``Source Object`` 中的 java bean 字段名相同时，不需要为field指定 ``DataFetcher``."

#: ../../schema.rst:49
msgid ""
"A ``TypeResolver`` helps ``graphql-java`` to decide which type a concrete"
" value belongs to. This is needed for ``Interface`` and ``Union``."
msgstr "对象 ``TypeResolver`` 帮助 ``graphql-java`` 判断数据的实际类型(type). 所以 ``Interface`` 和 ``Union`` 均需要指定关联的 ``TypeResolver(类型识别器)`` ."

#: ../../schema.rst:52
msgid ""
"For example imagine you have an ``Interface`` called *MagicUserType* "
"which resolves back to a series of Java classes called *Wizard*, *Witch* "
"and *Necromancer*.  The type resolver is responsible for examining a "
"runtime object and deciding what ``GraphqlObjectType`` should be used to "
"represent it, and hence what data fetchers and fields will be invoked."
msgstr "例如，你有一个 ``Interface`` 叫 *MagicUserType* 它有可能是以下的具体类型（Type） *Wizard*, *Witch* and *Necromancer*.  Type resolver（类型识别器） 的作用是在运行时识别出 ``GraphqlObjectType`` 的具体类型（Type）。后期具体类型下的field相关的 data fetcher被调用并获取数据."

#: ../../schema.rst:75
msgid "Creating a schema using the SDL"
msgstr "用 SDL 创建 Schema"

#: ../../schema.rst:77
msgid ""
"When defining a schema via SDL, you provide the needed ``DataFetcher`` s "
"and ``TypeResolver`` s when the executable schema is created."
msgstr "当使用SDL方法来开发时，你需要同时编写对应的 ``DataFetcher`` 和 ``TypeResolver``。"

#: ../../schema.rst:80
msgid ""
"Take for example the following static schema definition file called "
"``starWarsSchema.graphqls``:"
msgstr "很大的 Schema IDL 文件很难查看。"

#: ../../schema.rst:125
msgid ""
"The static schema definition file ``starWarsSchema.graphqls`` contains "
"the field and type definitions, but you need a runtime wiring to make it "
"a truly executable schema."
msgstr "由于Schema中只是指定了静态的字段和类型，你还需要把它绑定到java方法中。以让Schema可以运行起来"

#: ../../schema.rst:128
msgid ""
"The runtime wiring contains ``DataFetcher`` s, ``TypeResolvers`` s and "
"custom ``Scalar`` s that are needed to make a fully executable schema."
msgstr "这里的绑定，包括 ``DataFetcher`` ,  ``TypeResolvers`` 与自定义 ``Scalar``."

#: ../../schema.rst:131
msgid "You wire this together using this builder pattern:"
msgstr "用下页的Builder方法，就可以绑定Schema和Java程序"

#: ../../schema.rst:161
msgid ""
"Finally, you can generate an executable schema by combining the static "
"schema and the wiring together as shown in this example:"
msgstr "最后，你可以通过整合静态 Schema 和 绑定（wiring），而生成一个可以执行的 Schema。"

#: ../../schema.rst:176
msgid ""
"In addition to the builder style shown above, ``TypeResolver`` s and "
"``DataFetcher`` s can also be wired in using the ``WiringFactory`` "
"interface.  This allows for a more dynamic runtime wiring since the SDL "
"definitions can be examined in order to decide what to wire in.  You "
"could for example look at SDL directives, or some other aspect of the SDL"
" definition to help you decide what runtime to create."
msgstr "除了上面的 builder 风格, ``TypeResolver`` s 与 ``DataFetcher`` s 也可以通过 ``WiringFactory`` 接口绑定在一起。通过程序去分析 SDL ，就可以允许更自由的绑定。你可以 通过分析 SDL 声明, 或其它 SDL 定义去决定你的运行时逻辑。"

#: ../../schema.rst:223
msgid "Creating a schema programmatically"
msgstr "用代码方式创建 schema "

#: ../../schema.rst:225
msgid ""
"When the schema is created programmatically ``DataFetcher`` s and "
"``TypeResolver`` s are provided at type creation:"
msgstr "如果用程序方式来定义 Schema，在创建类型（type）的时候，你需要提供 ``DataFetcher`` and ``TypeResolver` 。"

#: ../../schema.rst:227
msgid "Example:"
msgstr "如:"

#: ../../schema.rst:249
msgid "Types"
msgstr "类型（Types）"

#: ../../schema.rst:251
msgid "The GraphQL type system supports the following kind of types:"
msgstr "GraphQL 类型系统支持以下类型"

#: ../../schema.rst:253 ../../schema.rst:263
msgid "Scalar"
msgstr ""

#: ../../schema.rst:254 ../../schema.rst:283
msgid "Object"
msgstr ""

#: ../../schema.rst:255 ../../schema.rst:313
msgid "Interface"
msgstr ""

#: ../../schema.rst:256 ../../schema.rst:339
msgid "Union"
msgstr ""

#: ../../schema.rst:257
msgid "InputObject"
msgstr ""

#: ../../schema.rst:258 ../../schema.rst:382
msgid "Enum"
msgstr ""

#: ../../schema.rst:265
msgid "``graphql-java`` supports the following Scalars:"
msgstr "``graphql-java`` 支持以下基本数据类型（ Scalars）。"

#: ../../schema.rst:268
msgid "``GraphQLString``"
msgstr ""

#: ../../schema.rst:269
msgid "``GraphQLBoolean``"
msgstr ""

#: ../../schema.rst:270
msgid "``GraphQLInt``"
msgstr ""

#: ../../schema.rst:271 ../../schema.rst:276
msgid "``GraphQLFloat``"
msgstr ""

#: ../../schema.rst:272
msgid "``GraphQLID``"
msgstr ""

#: ../../schema.rst:273
msgid "``GraphQLLong``"
msgstr ""

#: ../../schema.rst:274
msgid "``GraphQLShort``"
msgstr ""

#: ../../schema.rst:275
msgid "``GraphQLByte``"
msgstr ""

#: ../../schema.rst:277
msgid "``GraphQLBigDecimal``"
msgstr ""

#: ../../schema.rst:278
msgid "``GraphQLBigInteger``"
msgstr ""

#: ../../schema.rst:285 ../../schema.rst:317 ../../schema.rst:341
#: ../../schema.rst:384 ../../schema.rst:411
msgid "SDL Example:"
msgstr ""

#: ../../schema.rst:295 ../../schema.rst:325 ../../schema.rst:358
#: ../../schema.rst:395 ../../schema.rst:420
msgid "Java Example:"
msgstr "Java 例子："

#: ../../schema.rst:315
msgid "Interfaces are abstract definitions of types."
msgstr ""

#: ../../schema.rst:409
msgid "ObjectInputType"
msgstr ""

#: ../../schema.rst:433
msgid "Type References (recursive types)"
msgstr "类型引用 （Type References） (递归类型recursive types)"

#: ../../schema.rst:435
msgid ""
"GraphQL supports recursive types: For example a ``Person`` can contain a "
"list of friends of the same type."
msgstr "GraphQL 支持递归类型：如 ``Person（人）`` 可以包含很多朋友【译注：当然这些也是人类型的】"

#: ../../schema.rst:437
msgid ""
"To be able to declare such a type, ``graphql-java`` has a "
"``GraphQLTypeReference`` class."
msgstr "为了方便声明这种情况， ``graphql-java`` 有一个 ``GraphQLTypeReference`` 类。"

#: ../../schema.rst:439
msgid ""
"When the schema is created, the ``GraphQLTypeReference`` is replaced with"
" the actual real type Object."
msgstr "在实际的 Schema 创建时，``GraphQLTypeReference`` 会变为实际的类型。"

#: ../../schema.rst:441
msgid "For example:"
msgstr "例如："

#: ../../schema.rst:452
msgid ""
"When the schema is declared via SDL, no special handling of recursive "
"types is needed."
msgstr "如果用SDL（ID L）来定义 Schema ，不需要特殊的处理。"

#: ../../schema.rst:455
msgid "Modularising the Schema SDL"
msgstr "Schema IDL的模块化"

#: ../../schema.rst:457
msgid ""
"Having one large schema file is not always viable.  You can modularise "
"you schema using two techniques."
msgstr "很大的 Schema IDL 文件很难查看。所以我们有两种方法可以模块化 Schema。"

#: ../../schema.rst:459
msgid ""
"The first technique is to merge multiple Schema SDL files into one logic "
"unit.  In the case below the schema has been split into multiple files "
"and merged all together just before schema generation."
msgstr "方法一是合并多个 Schema IDL 文件到一个逻辑单元（ logic unit）。下面的例子是，在 Schema 生成前，合并多个独立的文件。"

#: ../../schema.rst:480
msgid ""
"The Graphql SDL type system has another construct for modularising a "
"schema.  You can use `type extensions` to add extra fields and interfaces"
" to a type."
msgstr "Graphql IDL 还有其它方法去做模块化。你可以使用 `type extensions` 去为现有类型增加字段和 interface。"

#: ../../schema.rst:483
msgid "Imagine you start with a type like this in one schema file."
msgstr "例如，一开始，你有这样一个文件："

#: ../../schema.rst:492
msgid "Another part of your system can extend this type to add more shape to it."
msgstr "你的系统的其它模块可以扩展这个类型："

#: ../../schema.rst:503
msgid ""
"You can have as many extensions as you think sensible.  They will be "
"combined in the order in which they are encountered.  Duplicate fields "
"will be merged as one (however field re-definitions into new types are "
"not allowed)."
msgstr "你可以按你的需要去扩展。它们会以被发现的顺序组合起来。重复的字段会被合并（但重定义一个字段的类型是不允许的）。"

#: ../../schema.rst:514
msgid ""
"With all these type extensions in place the `Human` type now looks like "
"this at runtime."
msgstr "完成合并后的 `Human` 类型会是这样的："

#: ../../schema.rst:526
msgid ""
"This is especially useful at the top level.  You can use extension types "
"to add new fields to the top level schema \"query\".  Teams could "
"contribute \"sections\" on what is being offered as the total graphql "
"query."
msgstr "这在顶层查询中特别有用。你可以用 extension types 去为顶层 \"query\" 增加字段每个团队可以提供自己的字段集，进而合成完整的查询。"

#: ../../schema.rst:559
msgid "Subscription Support"
msgstr "Subscription（订阅）的支持"

#: ../../schema.rst:561
msgid ""
"Subscriptions are not officially specified yet: ``graphql-java`` supports"
" currently a very basic implementation where you can define a "
"subscription in the schema with "
"``GraphQLSchema.Builder.subscription(...)``. This enables you to handle a"
" subscription request:"
msgstr "订阅功能还未在规范中： ``graphql-java`` 现在只支持简单的实现 ，你可以用  ``GraphQLSchema.Builder.subscription(...)`` 在 Schema 中定义订阅。这使你可以处理订阅请求。"

#~ msgid ""
#~ "``graphql-java`` offers two different "
#~ "ways of defining the schema: "
#~ "Programmatically as Java code or via "
#~ "a special graphql dsl (called IDL)."
#~ msgstr ""

#~ msgid ""
#~ "NOTE: IDL is not currently part of"
#~ " the `formal graphql spec "
#~ "<https://facebook.github.io/graphql/#sec-Appendix-"
#~ "Grammar-Summary.Query-Document>`_. The "
#~ "implementation in this library is based"
#~ " off the `reference implementation "
#~ "<https://github.com/graphql/graphql-js>`_.  However "
#~ "plenty of code out there is based"
#~ " on this IDL syntax and hence "
#~ "you can be fairly confident that "
#~ "you are building on solid technology "
#~ "ground."
#~ msgstr ""

#~ msgid "If you are unsure which option to use we recommend the IDL."
#~ msgstr ""

#~ msgid "IDL example:"
#~ msgstr ""

#~ msgid ""
#~ "For example imagine you have a "
#~ "``Interface`` called *MagicUserType* and it"
#~ " resolves back to a series of "
#~ "Java classes called perhaps *Wizard*, "
#~ "*Witch* and *Necromancer*.  The type "
#~ "resolver is responsible for examining a"
#~ " runtime object and deciding what "
#~ "``GraphqlObjectType`` should be used to "
#~ "represent it and hence what data "
#~ "fetchers and fields will be invoked."
#~ msgstr ""

#~ msgid "IDL"
#~ msgstr ""

#~ msgid ""
#~ "When defining a schema via IDL, "
#~ "you provide the needed ``DataFetcher`` s "
#~ "and ``TypeResolver`` s when the schema is"
#~ " created:"
#~ msgstr ""

#~ msgid "You could generate an executable schema via"
#~ msgstr ""

#~ msgid ""
#~ "The static schema definition file has"
#~ " the field and type definitions but"
#~ " you need a runtime wiring to "
#~ "make it a truly executable schema."
#~ msgstr ""

#~ msgid ""
#~ "The runtime wiring contains ``DataFetcher``s,"
#~ " ``TypeResolvers``s and custom ``Scalar``s "
#~ "that are needed to make a fully"
#~ " executable schema."
#~ msgstr ""

#~ msgid ""
#~ "There is a another way to wiring"
#~ " in type resolvers and data fetchers"
#~ " and that is via the "
#~ "``WiringFactory`` interface.  This allow for"
#~ " a more dynamic runtime wiring since"
#~ " the IDL definitions can be examined"
#~ " in order to decide what to "
#~ "wire in. You could for example "
#~ "look at IDL directives to help you"
#~ " decide what runtime to create or "
#~ "some other aspect of the IDL "
#~ "definition."
#~ msgstr ""

#~ msgid "Programmatically"
#~ msgstr ""

#~ msgid ""
#~ "When the schema is created "
#~ "programmatically you provide the "
#~ "``DataFetcher`` and ``TypeResolver`` when the"
#~ " type is created:"
#~ msgstr ""

#~ msgid "IDL Example:"
#~ msgstr ""

#~ msgid ""
#~ "When the schema is declared via "
#~ "IDL, no special handling of recursive"
#~ " types is needed."
#~ msgstr ""

#~ msgid "Modularising the Schema IDL"
#~ msgstr ""

#~ msgid ""
#~ "The first technique is to merge "
#~ "multiple Schema IDL files into one "
#~ "logic unit.  In the case below the"
#~ " schema has been split into multiple"
#~ " files and merged all together just"
#~ " before schema generation."
#~ msgstr ""

#~ msgid ""
#~ "The Graphql IDL type system has "
#~ "another construct for modularising your "
#~ "schema.  You can use `type extensions`"
#~ " to add extra fields and interfaces"
#~ " to a type."
#~ msgstr ""

